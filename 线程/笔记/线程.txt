0，
	前面讲到，为了并发的执行任务，操作系统引进了进程的概念。
	各个进程间的内存空间是独立的，那么导致进程间的通信比较困难
	
	分析：
	(1)创建一个进程的开销比较大，为什么？
		子进程会复制父进程整个地址空间
		
	(2)进程间通信，需要用到第三方（如：文件，内核，，，）
		开销也大
		
	于是就有人提出能不能在同一个进程内部实现 “任务并发” 呢？？
	
	-》线程
	
1，线程 thread
	线程是比进程更小的活动单位，它是进程中的一个执行分支，线程也是并发的一种情形
	
	进程内部可以有多个线程，他们并发执行，但是进程内部所有线程共享整个进程的地址空间
	
	main函数的执行分支，一般称之为主线程
	
		然后可以用 pthread_create函数去创建另外的执行分支/线程

		也就是说，该进程内部的指令，分为了若干个执行分支，由各个线程去执行
	
	线程特点：
	（1）创建一个线程的开销要比创建一个进程的开销要小得多
			因为创建线程不需要复制主线程的数据和指令
			
	（2）线程间通信十分方便
		因为该进程里的所有线程直接共享整个进程的地址空间
		
	（3）线程也是一个动态概念
		和进程一样
		
	（4）也要考虑“同步”问题
		
	（5）自从有了线程后
		系统调度的单位变为了线程
		但是资源的分配单位还是进程
	
2，相关API
	(1)创建一个线程： pthread_create
		pthread_create - create a new thread

SYNOPSIS
       #include <pthread.h>
		线程和进程一样，也有一个id，假设称之为tid，类型是 pthread_t
		void *(*start_routine) (void *)
		start_routine：函数指针类型， void * (void *)指针类型
					该函数有一个void *的返回值，有一个void *的参数
		
       int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg);
			thread:指针，指向的空间用来保存线程id
			attr:用来指定该线程的属性，一般为NULL，表示采取默认属性
					如果不想用默认属性，后面会学其他函数来修改线程属性
			
			start_routine：函数指针，它指向了一个函数，这个函数就是该新线程要去执行
					的内容
	
			arg：是传给线程函数的参数
				void *类型 
				
			返回值：
				成功返回0
				失败返回-1，同时errno被设置
			
			
			注意：如果主线程 return 或者 遇到 }了，意味着进程结束了，那么其他线程也会跟着结束
			
	(2)线程结束
		(2.1)线程函数执行完毕
		(2.2)在线程执行的任意时刻 调用 pthread_exit()
				
		NAME
			   pthread_exit - terminate calling thread

		SYNOPSIS
			   #include <pthread.h>

			   void pthread_exit(void *retval);
					retval:返回值，类似进程中的退出码
				
		(2.3) 线程被别人 “取消/杀死”
			其他线程调用 pthread_cancel
				
			NAME
       pthread_cancel - send a cancellation request to a thread

SYNOPSIS
       #include <pthread.h>

       int pthread_cancel(pthread_t thread);
			thread:要取消的那个线程的 id

       Compile and link with -pthread.
	
			t1 : pthread_cancel(t2);
				t1线程调用函数取消t2线程，t2线程一定会死吗？不一定
				
				这个得看t2进程的一个属性：是否可以被 取消

			这个“是否可以被取消”的属性，系统提供一个函数去设置它
			
			pthread_setcancelstate
				
			SYNOPSIS
			#include <pthread.h>

			int pthread_setcancelstate(int state, int *oldstate);	
				state:要设置的属性/状态
					PTHREAD_CANCEL_ENABLE	:可以被取消
					PTHREAD_CANCEL_DISABLE	：不可以被取消
					
				oldstate：保存上一次这个属性的状态
				
				返回值：
					成功返回0，失败返回-1
				
		----------------------------------------------------
			一个线程结束了，并不代表它所有的资源都被释放了。
			一个线程退出，它的资源是否全部释放，取决于它的属性：
				detach ：分离属性
				
				ENABLE :分离
					该线程结束，它的所有资源就会自动释放
				DISABLE：不分离	-》默认属性
					该线程结束，它的所有资源就不会自动释放
				
			怎么设置这个属性呢？？
			
			SYNOPSIS
		    #include <pthread.h>

		    int pthread_detach(pthread_t thread);
				thread:需要设置分离属性的线程id
				
			
			pthread_self - obtain ID of the calling thread

			SYNOPSIS
				   #include <pthread.h>

				   pthread_t pthread_self(void);
						获取自己的线程id
						返回自己的线程id
				
				
			如果说没有设置分离属性，那怎么才能释放线程资源呢？？？
			pthread_join
			
	(3)等待一个线程结束/释放该线程的资源
			NAME
		pthread_join - join with a terminated thread

		SYNOPSIS
		#include <pthread.h>

		int pthread_join(pthread_t thread, void **retval);
			thread:要等待的那个线程的id
			retval:二级指针，指向的空间，用来保存 pthread_exit的“retval” ，或者线程函数的 return值
			
			
			
3，线程互斥锁
	线程互斥锁也是一个信号量，只不过线程互斥锁，存在于进程地址空间，
	用于线程间的同步的时候，线程互斥锁的效率要比信号量要高
		
		可能需要下载“man 手册”
		sudo apt-get update
		sudo apt-get insatll manpages-posix-dev
	
	(1)初始化线程互斥锁
		pthread_mutex_init
			NAME
       pthread_mutex_init — destroy and initialize a mutex

SYNOPSIS
       #include <pthread.h>
			posix 标准中，用 pthread_mutex_t类型 来描述一个 线程互斥锁
       int pthread_mutex_init(pthread_mutex_t *restrict mutex,
           const pthread_mutexattr_t *restrict attr);
			mutex：待初始化的线程互斥锁的地址
			attr:线程互斥锁的属性，一般为NULL，采取默认属性
				如：线程互斥锁默认初始化后值为 1， unlock
			
			返回值：
				成功返回0
				失败返回非0
				
		pthread_mutex_t mutex;
		pthread_mutex_init(&mutex,NULL);
			
			
	(2)线程互斥锁 P操作 (lock,down)
		NAME
       pthread_mutex_lock, pthread_mutex_trylock, pthread_mutex_unlock — lock and unlock a mutex

SYNOPSIS
       #include <pthread.h>
			“死等”
       int pthread_mutex_lock(pthread_mutex_t *mutex);
			mutex：线程互斥锁的地址
			
			“试一试，不等”
       int pthread_mutex_trylock(pthread_mutex_t *mutex);
			
	   AME
       pthread_mutex_timedlock — lock a mutex

SYNOPSIS
       #include <pthread.h>
       #include <time.h>
			
			“限时等待”
       int pthread_mutex_timedlock(pthread_mutex_t *restrict mutex,
           const struct timespec *restrict abstime);
			“相对时间” ：等2秒钟
				“绝对时间” ：等待 xxx时,xxx分,xxx秒，一般是用现在的时间 +相对时间
			
				struct timespec
				{
					long tv_sec;//秒数
					long tv_nsec;//纳秒				
				};
				怎么获取现在的时间
				
				clock_gettime
			int clock_gettime(clockid_t clk_id, struct timespec *tp);
				clk_id: CLOCK_REALTIME  测量真实时间的系统级时钟
				tp:指针，指向的结构体用来保存获取到的时间
				
			比如：
				truct timespec timeout;
				
				clock_gettime(CLOCK_REALTIME,&timeout);
				timeout已经保存了当前时间
				
				加上你要等待的时间，-》绝对时间
				
				比如你要等待2秒零 2000纳秒
				
				timeout.tv_sec += 2;
				timeout.tv_nsec += 2000;
				if(timeout.tv_nsec >= 1000000000)
				{
					timeout.tv_sec++;
					timeout.tv_nsec -= 1000000000;
				}

			都是成功返回0
				失败返回其他值
	   
	(3)线程互斥锁 V操作(unlock,up)
        int pthread_mutex_unlock(pthread_mutex_t *mutex);
			mutex：线程互斥锁的地址
			
	(4)销毁 线程互斥锁 		
		int pthread_mutex_destroy(pthread_mutex_t *mutex);
			
			
4，生产者和消费者模型
	见图
	
	当“仓库”里没有数据的时候，消费者怎么办？？
		等待
		1，不停的去测试/询问，看有没有数据。
			这种不停的询问，我们称之为 “轮询”
			但是轮询有两个缺陷
				占用CPU资源
				轮询会有一个时间差，不及时
				
		2，有数据的时候，唤醒我（没有的时候我就“休眠”，让出CPU）
			线程条件变量
		
	反过来
	当“仓库”里数据“满了”的时候，生产者怎么办？？		
		一样的
		....
		
5, 线程 条件变量
	用条件变量 表示一个特定的 条件成立或事件发生
		
	条件变量的类型 ： pthread_cond_t
		
		
	一般来讲，条件变量有四种操作
		初始化
		等待一个条件变量（等待 条件成立或事件发生）
		唤醒 （唤醒正在等待该条件变量的 线程）
		销毁它
		
	线程1								线程2
	.....								.....
	if(条件不成立/事件没发生)
	{
		等待该条件成立/等待该事件发生	
	}									....
										if(条件成立/事件发生了)
										{
											唤醒 等待的线程
										}
	消费/生产
	
	
	例子：
		生产者
		生产数据，data++,假设data到达10000的时候，代表该数据生产完成
			for(0>-10000)
			{
				data++
				
				//如果消费值是条件变量方式，那么生产者就需要在生产完成时唤醒它
				if(data == 10000)
					唤醒
			}
		消费者
		消费数据， data = 0
			轮询：
				while(1)
				{
					if(data >= 10000)
					{
						消费
						data = 0;
					}
				}
	
			条件变量
			
			wait...(data >= 10000)
				data = 0;
			
	
	具体的API
	(1)初始化/销毁一个线程条件变量
		pthread_cond_init
		SYNOPSIS
		#include <pthread.h>
		int pthread_cond_init(pthread_cond_t *restrict cond,const pthread_condattr_t *restrict attr);
			cond：线程条件变量的地址
			attr:属性，一般为NULL，表示默认属性
		
		int pthread_cond_destroy(pthread_cond_t *cond);
			cond:线程条件变量的地址

	(2)等待一个条件变量（等待 条件成立或事件发生）
		pthread_cond_wait
		
		SYNOPSIS
        #include <pthread.h>
		int pthread_cond_wait(pthread_cond_t *restrict cond,
           pthread_mutex_t *restrict mutex);
			cond:线程条件变量的地址
			mutex:线程互斥锁的地址。用来保护cond代表的共享资源
			
			
		   
        int pthread_cond_timedwait(pthread_cond_t *restrict cond,
           pthread_mutex_t *restrict mutex,
           const struct timespec *restrict abstime);
			限时等待
			
	(3) 唤醒我（没有的时候我就“休眠”，让出CPU）
read_cond_broadcast, pthread_cond_signal — broadcast or signal a condition

SYNOPSIS
       #include <pthread.h>

       int pthread_cond_broadcast(pthread_cond_t *cond);//广播：唤醒所有等待的线程
       int pthread_cond_signal(pthread_cond_t *cond);//只唤醒一个线程(随机唤醒一个)
			cond:条件变量的地址
			
		
		
		
	作业：
		读者写者，读者优先模型
		读者写者，写者优先模型
		
		
		
		
		
	
	